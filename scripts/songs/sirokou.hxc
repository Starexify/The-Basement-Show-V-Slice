import flixel.FlxCamera;
import flixel.FlxG;
import flixel.FlxObject;
import flixel.math.FlxPoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import funkin.data.character.CharacterDataParser;
import funkin.FunkinMemory;
import funkin.graphics.FunkinSprite;
import funkin.modding.events.ScriptEvent;
import funkin.play.character.BaseCharacter;
import funkin.play.character.CharacterType;
import funkin.play.cutscene.CutsceneType;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.notes.Strumline;
import funkin.play.notes.StrumlineNote;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.song.ScriptedSong;
import funkin.Preferences;
import funkin.ui.FullScreenScaleMode;
import funkin.util.Constants;
import funkin.util.GRhythmUtil;
import openfl.filters.ShaderFilter;

class Sirokou extends ScriptedSong {
    var playState(get, never):PlayState;

    function get_playState():PlayState { return PlayState.instance; }

    var playerPos:Array<FlxPoint> = [];
    var opponentPos:Array<FlxPoint> = [];
    var playerStrX:Float;
    var oppStrX:Float;

    var jerry:BaseCharacter;
    var bf:BaseCharacter;
    var gf:BaseCharacter;
    var darkJerry:BaseCharacter;
    var darkBF:BaseCharacter;
    var darkGF:BaseCharacter;
    var rtxJerry:BaseCharacter;
    var rtxBF:BaseCharacter;
    var rtxGF:BaseCharacter;

    var warning:FunkinSprite;
    var shade:FunkinSprite;

    var particles:FlameParticles;
    var fire:FunkinSprite;
    var fireGrid:FunkinSprite;

    var spinStrums:Bool = false;
    var heatwave:Bool = false;

    var hasPlayedCutscene:Bool = false;

    var camList:Array<FlxCamera>;
    var heatwaveShader:HeatwaveShader;
    var tvShader:OldTVShader;

    function new() {
        super("sirokou");
    }

    override public function onCreate(event:ScriptEvent) {
        FunkinMemory.cacheTexture(Paths.image("stages/particle"));
        jerry = CharacterDataParser.fetchCharacter("mouse 3");
        jerry.ignoreExclusionPref = [];
        bf = playState.currentStage.getBoyfriend();
        gf = playState.currentStage.getGirlfriend();

        darkJerry = CharacterDataParser.fetchCharacter("mouse 3 dark");
        darkJerry.ignoreExclusionPref = [];
        darkBF = CharacterDataParser.fetchCharacter("bf-tbs dark");
        darkBF.ignoreExclusionPref = [];
        darkGF = CharacterDataParser.fetchCharacter("gf-tbs dark");
        darkGF.ignoreExclusionPref = [];

        rtxJerry = CharacterDataParser.fetchCharacter("mouse 3 rtx");
        rtxJerry.ignoreExclusionPref = [];
        rtxBF = CharacterDataParser.fetchCharacter("bf-tbs rtx");
        rtxBF.ignoreExclusionPref = [];
        rtxGF = CharacterDataParser.fetchCharacter("gf-tbs rtx");
        rtxGF.ignoreExclusionPref = [];

        particles = new FlameParticles(0, 0, 100);
        particles.camera = playState.camHUD;
        playState.add(particles);
    }

    override public function onSongLoaded(event:SongLoadScriptEvent) {
        fire = FunkinSprite.create(0, -530);
        fire.frames = Paths.getSparrowAtlas("stages/fire");
        fire.animation.addByPrefix("fire", "fire", 24, true);
        fire.scale.set(2.6 * FullScreenScaleMode.wideScale.x, 4.3);
        fire.updateHitbox();
        fire.camera = playState.camHUD;
        fire.alpha = 0;
        playState.add(fire);

        fireGrid = FunkinSprite.create(0, 0, "fireGrid");
        fireGrid.camera = playState.camHUD;
        fireGrid.alpha = 0;
        playState.add(fireGrid);

        shade = FunkinSprite.create(0, 0, "shade2");
        shade.camera = playState.camHUD;
        playState.add(shade);

        trace();
        warning = FunkinSprite.create(0, 0, "warningimage");
        warning.camera = TBSHud.camOther;
        warning.screenCenter();
        playState.add(warning);

        playState.camHUD.alpha = 0;

        playState.currentStage.getNamedProp("basementLight").visible = false;

        // Shader stuff
        heatwave = false;
        tvShader = new OldTVShader();
        heatwaveShader = new HeatwaveShader();
        tvShader.setFloat("blueOpac", 1.3);
        tvShader.setFloat("redOpac", 0);
        heatwaveShader.setFloat("speed", 2);
        heatwaveShader.setFloat("strength", 0.48);

        camList = [playState.camHUD, playState.camGame];
        for (cam in camList) cam.filters = [new ShaderFilter(tvShader)];
    }

    override public function onSongStart(event:ScriptEvent) {
        for (note in playState.playerStrumline.strumlineNotes) playerPos.push(note.getPosition());
        for (note in playState.opponentStrumline.strumlineNotes) opponentPos.push(note.getPosition());
        playerStrX = playState.playerStrumline.x;
        oppStrX = playState.opponentStrumline.x;
    }

    override public function onStepHit(event:SongTimeScriptEvent) {
        switch (event.step) {
            case 2: FlxTween.tween(warning, {alpha: 0}, 4, {});
            case 110: FlxTween.tween(playState.camGame, {alpha: 0}, 0.5, {});
            case 120, 1432: FlxTween.tween(playState.camHUD, {alpha: 1}, 0.5, {});
            case 128: FlxTween.tween(playState.camGame, {alpha: 1}, 1, {});
            case 496, 2080:
                playState.camHUD.alpha = 0;
                for (char in playState.currentStage.characters) char.visible = false;
                playState.currentStage.getNamedProp("basement").visible = false;
                playState.currentStage.getNamedProp("basementLight").visible = false;
            case 512, 2096:
                playState.camHUD.alpha = 1;
                for (char in playState.currentStage.characters) char.visible = true;
                playState.currentStage.getNamedProp("basementDark").visible = true;
            case 800, 2352:
                heatwave = true;
                fire.alpha = 0.45;
                fire.animation.play("fire");
                tvShader.setFloat("blueOpac", 0);
                tvShader.setFloat("redOpac", 1.6);
                for (cam in camList) cam.filters = [new ShaderFilter(tvShader), new ShaderFilter(heatwaveShader)];

                playState.currentStage.getNamedProp("basementDark").visible = false;
                playState.currentStage.getNamedProp("basementRed").visible = true;
            case 1312:
                heatwave = false;
                fire.animation.stop();
                fire.alpha = 0;
                tvShader.setFloat("blueOpac", 1.3);
                tvShader.setFloat("redOpac", 0);
                for (cam in camList) cam.filters = [new ShaderFilter(tvShader)];

                playState.currentStage.getNamedProp("basementDark").visible = true;
                playState.currentStage.getNamedProp("basementRed").visible = false;
            case 1760:
                playState.currentStage.getGirlfriend().visible = false;
                playState.currentStage.getNamedProp("basementDark").visible = false;
                playState.currentStage.getDad().visible = false;
            case 1824:
                playState.currentStage.getDad().visible = true;
            case 1840:
                playState.currentStage.getGirlfriend().visible = true;
                playState.currentStage.getNamedProp("basementLight").visible = true;
                centerStrum();
            case 2640:
                playState.playerStrumline.background.alpha = Preferences.strumlineBackgroundOpacity / 100;
                playState.opponentStrumline.background.alpha = Preferences.strumlineBackgroundOpacity / 100;
                playState.playerStrumline.x = playerStrX;
                playState.opponentStrumline.x = oppStrX;
                playState.playerStrumline.noteHoldCovers.clear();
                playState.opponentStrumline.noteHoldCovers.clear();
                spinStrums = true;
            case 2864:
                var perMember;
                for (member in playState.members) {
                    perMember = member;
                    if (perMember != null && (perMember is FlxObject) && perMember.camera == playState.camHUD)
                        FlxTween.tween(perMember, {alpha: 0}, 5, {});
                }

                for (char in playState.currentStage.characters) char.visible = false;
                playState.currentStage.getNamedProp("basement").visible = false;
                playState.currentStage.getNamedProp("basementLight").visible = false;
        }

        if (event.step % 1 == 0 && heatwave) particles.spawnParticle();

        if (event.beat > 199 && event.beat <= 325) {
            if (event.step % 4 == 0) {
                FlxTween.cancelTweensOf(playState.camHUD);
                FlxTween.cancelTweensOf(playState.camGame.scroll);
                FlxTween.tween(playState.camHUD, {y: -12}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.circOut });
                FlxTween.tween(playState.camGame.scroll, {y: 12}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.sineIn });
            }
            if (event.step % 4 == 2) {
                FlxTween.cancelTweensOf(playState.camHUD);
                FlxTween.cancelTweensOf(playState.camGame.scroll);
                FlxTween.tween(playState.camHUD, {y: 0}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.sineIn });
                FlxTween.tween(playState.camGame.scroll, {y: 0}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.sineIn });
            }
        }
        if (event.beat == 326) {
            FlxTween.cancelTweensOf(playState.camHUD);
            FlxTween.cancelTweensOf(playState.camGame.scroll);
            FlxTween.tween(playState.camHUD, {y: 0}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.circOut });
            FlxTween.tween(playState.camGame.scroll, {y: 0}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.sineIn });
        }
    }

    override public function onBeatHit(event:SongTimeScriptEvent) {
        switch (event.beat) {
            case 128, 328, 520:
                if (darkJerry != null) {
                    playState.currentStage.remove(playState.currentStage.getDad());
                    playState.currentStage.addCharacter(darkJerry, CharacterType.DAD);
                }
                if (darkBF != null) {
                    playState.currentStage.remove(playState.currentStage.getBoyfriend());
                    playState.currentStage.addCharacter(darkBF, CharacterType.BF);
                }
                if (darkGF != null) {
                    playState.currentStage.remove(playState.currentStage.getGirlfriend());
                    playState.currentStage.addCharacter(darkGF, CharacterType.GF);
                }
            case 200, 588:
                if (rtxJerry != null) {
                    playState.currentStage.remove(playState.currentStage.getDad());
                    playState.currentStage.addCharacter(rtxJerry, CharacterType.DAD);
                }
                if (rtxBF != null) {
                    playState.currentStage.remove(playState.currentStage.getBoyfriend());
                    playState.currentStage.addCharacter(rtxBF, CharacterType.BF);
                }
                if (rtxGF != null) {
                    playState.currentStage.remove(playState.currentStage.getGirlfriend());
                    playState.currentStage.addCharacter(rtxGF, CharacterType.GF);
                }
            case 460:
                if (jerry != null) {
                    playState.currentStage.remove(playState.currentStage.getDad());
                    playState.currentStage.addCharacter(jerry, CharacterType.DAD);
                }
                if (bf != null) {
                    playState.currentStage.remove(playState.currentStage.getBoyfriend());
                    playState.currentStage.addCharacter(bf, CharacterType.BF);
                }
                if (gf != null) {
                    playState.currentStage.remove(playState.currentStage.getGirlfriend());
                    playState.currentStage.addCharacter(gf, CharacterType.GF);
                }
            case 716:
                VideoCutscene.play(Paths.videos("Lyrics"), CutsceneType.MIDSONG);
        }
    }

    override public function onUpdate(event:UpdateScriptEvent) {
        if (playState == null || playState.playerStrumline == null) return;

        tvShader.update(event.elapsed);
        if (heatwave) heatwaveShader.update(event.elapsed);

        if (spinStrums) spinningStrums();

        centerHoldCovers(playState.playerStrumline);
        centerHoldCovers(playState.opponentStrumline);
    }

    function spinningStrums() {
        spinStrumline(playState.playerStrumline.strumlineNotes.members, playerPos, (playState.conductorInUse.songPosition / Constants.MS_PER_SEC));
        spinStrumline(playState.opponentStrumline.strumlineNotes.members, opponentPos, (playState.conductorInUse.songPosition / Constants.MS_PER_SEC));
        spinHoldNotes(playState.playerStrumline, (playState.conductorInUse.songPosition / Constants.MS_PER_SEC));
        spinHoldNotes(playState.opponentStrumline, (playState.conductorInUse.songPosition / Constants.MS_PER_SEC));
    }

    function spinStrumline(strumNotes:Array<StrumlineNote>, originalPositions:Array<FlxPoint>, timeInSeconds:Float) {
        for (i in 0...strumNotes.length) {
            if (strumNotes == null) continue;
            var phase:Float = timeInSeconds + i * 0.25;
            var offsetX:Float = 15 * Math.sin(phase * Math.PI);
            var offsetY:Float = 30 * Math.cos(phase * Math.PI);

            strumNotes[i].setPosition(originalPositions[i].x + offsetX, originalPositions[i].y + offsetY);
        }
    }

    function spinHoldNotes(strumline:Strumline, timeInSeconds:Float) {
        for (holdNote in strumline.holdNotes.members) {
            if (holdNote == null || !holdNote.alive) continue;
            var noteDirection:Int = holdNote.noteDirection;
            var strumNote = strumline.strumlineNotes.members[noteDirection];
            holdNote.x = strumNote.x + (strumNote.width - holdNote.width) * 0.5;
            if (strumline.conductorInUse.songPosition > holdNote.strumTime && holdNote.hitNote) {
                if (strumline.isDownscroll) holdNote.y = strumNote.y - holdNote.height + Strumline.STRUMLINE_SIZE / 2;
                else holdNote.y = strumNote.y + Strumline.STRUMLINE_SIZE / 2;
            } else {
                if (strumline.isDownscroll) holdNote.y = strumNote.y + GRhythmUtil.getNoteY(holdNote.strumTime, strumline.scrollSpeed, strumline.isDownscroll, strumline.conductorInUse) - holdNote.height + Strumline.STRUMLINE_SIZE / 2 + holdNote.yOffset;
                else holdNote.y = strumNote.y + GRhythmUtil.getNoteY(holdNote.strumTime, strumline.scrollSpeed, strumline.isDownscroll, strumline.conductorInUse) + Strumline.STRUMLINE_SIZE / 2 + holdNote.yOffset;
            }
        }

        for (note in strumline.notes.members) {
            if (note == null || !note.alive) continue;
            note.x = strumline.strumlineNotes.members[note.direction].x;
        }
    }

    function centerHoldCovers(strumline:Strumline) {
        for (holdNote in strumline.holdNotes.members) {
            var holdCover = holdNote.cover;
            if (holdCover == null) continue;
            var strumNote = strumline.strumlineNotes.members[holdNote.noteDirection];
            var offsets = strumline.noteStyle.getHoldCoverOffsets();

            // Center the hold cover on the target strum, then apply offsets
            holdCover.x = strumNote.x + (strumNote.width - holdCover.width) * 0.5
            + offsets[0] * holdCover.scale.x - 12;
            holdCover.y = strumNote.y + (strumNote.height - holdCover.height) * 0.5
            + offsets[1] * holdCover.scale.y + 48;
        }
    }

    function centerStrum() {
        for (note in playState.opponentStrumline.strumlineNotes) {
            FlxTween.tween(note, {x: -1000}, 1.5, {ease: FlxEase.quadInOut});
            FlxTween.tween(note, {angle: 360}, 1, {ease: FlxEase.quadInOut});
        }

        for (note in playState.playerStrumline.strumlineNotes)
            FlxTween.tween(note, {x: note.x - FlxG.width * 0.25 + Constants.STRUMLINE_X_OFFSET, angle: 360}, 1, {ease: FlxEase.quadInOut});

        FlxTween.tween(playState.opponentStrumline, {x: -1000}, 1, {ease: FlxEase.quadInOut});
        FlxTween.tween(playState.opponentStrumline.background, {x: -1000}, 1, {ease: FlxEase.quadInOut});
        FlxTween.tween(playState.playerStrumline, {x: playState.playerStrumline.x - FlxG.width * 0.25 + Constants.STRUMLINE_X_OFFSET}, 1, {ease: FlxEase.quadInOut });
        FlxTween.tween(playState.playerStrumline.background, {alpha: 0, x: playState.playerStrumline.background.x - FlxG.width * 0.25 + Constants.STRUMLINE_X_OFFSET}, 1, {ease: FlxEase.quadInOut });
        playState.playerStrumline.noteHoldCovers.clear();
        playState.opponentStrumline.noteHoldCovers.clear();
    }

    override public function onSongEnd(event:ScriptEvent) {
        if (fire != null) fire.destroy();
        if (warning != null) warning.destroy();
        if (tvShader != null) tvShader = null;
        if (heatwaveShader != null) heatwaveShader = null;

        if (!PlayStatePlaylist.isStoryMode) return;
        if (!hasPlayedCutscene) {
            event.cancel();
            VideoCutscene.play(Paths.videos("W1 End"), CutsceneType.ENDING);
            hasPlayedCutscene = true;
        }
    }
}