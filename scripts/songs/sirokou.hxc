import flixel.FlxCamera;
import flixel.FlxG;
import flixel.math.FlxPoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxColor;
import funkin.data.character.CharacterDataParser;
import funkin.graphics.FunkinSprite;
import funkin.modding.events.ScriptEvent;
import funkin.play.character.BaseCharacter;
import funkin.play.character.CharacterType;
import funkin.play.cutscene.CutsceneType;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.song.ScriptedSong;
import funkin.ui.FullScreenScaleMode;
import funkin.util.Constants;
import openfl.filters.ShaderFilter;

class Sirokou extends ScriptedSong {
    var playState(get, never):PlayState;

    function get_playState():PlayState { return PlayState.instance; }

    var playerPos:Array<FlxPoint> = [];
    var opponentPos:Array<FlxPoint> = [];

    var jerry:BaseCharacter;
    var bf:BaseCharacter;
    var gf:BaseCharacter;
    var darkJerry:BaseCharacter;
    var darkBF:BaseCharacter;
    var darkGF:BaseCharacter;
    var rtxJerry:BaseCharacter;
    var rtxBF:BaseCharacter;
    var rtxGF:BaseCharacter;

    var warning:FunkinSprite;
    var shade:FunkinSprite;
    var fire:FunkinSprite;
    var fireGrid:FunkinSprite;

    var centeredStrum:Bool = false;
    var spinStrums:Bool = false;
    var heatwave:Bool = false;

    var hasPlayedCutscene:Bool = false;

    var camList:Array<FlxCamera>;
    var heatwaveShader:HeatwaveShader;
    var tvShader:OldTVShader;

    function new() {
        super("sirokou");
    }

    override public function onCreate(event:ScriptEvent) {
        jerry = CharacterDataParser.fetchCharacter("mouse 3");
        jerry.ignoreExclusionPref = [];
        bf = playState.currentStage.getBoyfriend();
        gf = playState.currentStage.getGirlfriend();

        darkJerry = CharacterDataParser.fetchCharacter("mouse 3 dark");
        darkJerry.ignoreExclusionPref = [];
        darkBF = CharacterDataParser.fetchCharacter("bf-tbs dark");
        darkBF.ignoreExclusionPref = [];
        darkGF = CharacterDataParser.fetchCharacter("gf-tbs dark");
        darkGF.ignoreExclusionPref = [];

        rtxJerry = CharacterDataParser.fetchCharacter("mouse 3 rtx");
        rtxJerry.ignoreExclusionPref = [];
        rtxBF = CharacterDataParser.fetchCharacter("bf-tbs rtx");
        rtxBF.ignoreExclusionPref = [];
        rtxGF = CharacterDataParser.fetchCharacter("gf-tbs rtx");
        rtxGF.ignoreExclusionPref = [];
    }

    override public function onSongLoaded(event:SongLoadScriptEvent) {
        fire = FunkinSprite.create(0, -530);
        fire.frames = Paths.getSparrowAtlas("stages/fire");
        fire.animation.addByPrefix("fire", "fire", 24, true);
        fire.scale.set(2.6 * FullScreenScaleMode.wideScale.x, 4.3);
        fire.updateHitbox();
        fire.camera = playState.camHUD;
        fire.alpha = 0;
        playState.add(fire);

/*        fireGrid = FunkinSprite.create(0, 0, "fireGrid");
        fireGrid.camera = playState.camHUD;
        fireGrid.alpha = 0;
        playState.add(fireGrid);*/

        shade = FunkinSprite.create(0, 0, "shade2");
        shade.camera = playState.camHUD;
        playState.add(shade);

        warning = FunkinSprite.create(0, 0, "warningimage");
        warning.camera = FlxG.cameras.list[FlxG.cameras.list.length - 1];
        playState.add(warning);

        playState.camHUD.alpha = 0;
        playState.camCutscene.stopFade();
        playState.camCutscene.fade(FlxColor.BLACK, 0);

        playState.currentStage.getNamedProp("basementLight").visible = false;

        // Shader stuff
        heatwave = false;
        tvShader = new OldTVShader();
        heatwaveShader = new HeatwaveShader();
        tvShader.setFloat("blueOpac", 1.3);
        tvShader.setFloat("redOpac", 0);
        heatwaveShader.setFloat("speed", 2);
        heatwaveShader.setFloat("strength", 0.48);

        camList = [playState.camHUD, playState.camGame];
        for (cam in camList) cam.filters = [new ShaderFilter(tvShader)];
    }

    override public function onSongStart(event:ScriptEvent) {
        for (note in playState.playerStrumline.strumlineNotes) playerPos.push(note.getPosition());
        for (note in playState.opponentStrumline.strumlineNotes) opponentPos.push(note.getPosition());
    }

    override public function onStepHit(event:SongTimeScriptEvent) {
        switch (event.step) {
            case 2:
                FlxTween.tween(warning, {alpha: 0}, 4, {});
                PlayState.instance.camCutscene.fade(FlxColor.BLACK, 4, true);
            case 110: FlxTween.tween(playState.camGame, {alpha: 0}, 0.5, {});
            case 120, 1432: FlxTween.tween(playState.camHUD, {alpha: 1}, 0.5, {});
            case 128: FlxTween.tween(playState.camGame, {alpha: 1}, 1, {});
            case 496, 2080:
                playState.camHUD.alpha = 0;
                for (char in playState.currentStage.characters) char.visible = false;
                playState.currentStage.getNamedProp("basement").visible = false;
                playState.currentStage.getNamedProp("basementLight").visible = false;
            case 512, 2096:
                playState.camHUD.alpha = 1;
                for (char in playState.currentStage.characters) char.visible = true;
                playState.currentStage.getNamedProp("basementDark").visible = true;
            case 800, 2352:
                heatwave = true;
                fire.alpha = 0.45;
                fire.animation.play("fire");
                tvShader.setFloat("blueOpac", 0);
                tvShader.setFloat("redOpac", 1.6);
                for (cam in camList) cam.filters = [new ShaderFilter(tvShader), new ShaderFilter(heatwaveShader)];

                playState.currentStage.getNamedProp("basementDark").visible = false;
                playState.currentStage.getNamedProp("basementRed").visible = true;
            case 1312:
                heatwave = false;
                fire.animation.stop();
                fire.alpha = 0;
                tvShader.setFloat("blueOpac", 1.3);
                tvShader.setFloat("redOpac", 0);
                for (cam in camList) cam.filters = [new ShaderFilter(tvShader)];

                playState.currentStage.getNamedProp("basementDark").visible = true;
                playState.currentStage.getNamedProp("basementRed").visible = false;
            case 1760:
                playState.currentStage.getGirlfriend().visible = false;
                playState.currentStage.getNamedProp("basementDark").visible = false;
                playState.currentStage.getDad().visible = false;
            case 1824:
                playState.currentStage.getDad().visible = true;
            case 1840:
                playState.currentStage.getGirlfriend().visible = true;
                playState.currentStage.getNamedProp("basementLight").visible = true;
                centerStrum();
            case 2640:
                centeredStrum = false;
                spinStrums = true;
            case 2864:
                FlxTween.tween(playState.camHUD, {alpha: 1}, 5, {});
                for (char in playState.currentStage.characters) char.visible = false;
                playState.currentStage.getNamedProp("basement").visible = false;
                playState.currentStage.getNamedProp("basementLight").visible = false;
        }

        if (event.beat > 199 && event.beat <= 325) {
            if (event.step % 4 == 0) {
                FlxTween.tween(playState.camHUD, {y: 12}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.circOut });
                FlxTween.tween(playState.camGame.scroll, {y: -12}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.sineIn });
            }
            if (event.step % 4 == 2) {
                FlxTween.tween(playState.camHUD, {y: 0}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.circOut });
                FlxTween.tween(playState.camGame.scroll, {y: 0}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.sineIn });
            }
        }
        if (event.beat == 326) {
            FlxTween.tween(playState.camHUD, {y: 0}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.circOut });
            FlxTween.tween(playState.camGame.scroll, {y: 0}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.sineIn });
        }
    }

    override public function onBeatHit(event:SongTimeScriptEvent) {
        switch (event.beat) {
            case 128, 328, 520:
                if (darkJerry != null) {
                    playState.currentStage.remove(playState.currentStage.getDad());
                    playState.currentStage.addCharacter(darkJerry, CharacterType.DAD);
                }
                if (darkBF != null) {
                    playState.currentStage.remove(playState.currentStage.getBoyfriend());
                    playState.currentStage.addCharacter(darkBF, CharacterType.BF);
                }
                if (darkGF != null) {
                    playState.currentStage.remove(playState.currentStage.getGirlfriend());
                    playState.currentStage.addCharacter(darkGF, CharacterType.GF);
                }
            case 200, 588:
                if (rtxJerry != null) {
                    playState.currentStage.remove(playState.currentStage.getDad());
                    playState.currentStage.addCharacter(rtxJerry, CharacterType.DAD);
                }
                if (rtxBF != null) {
                    playState.currentStage.remove(playState.currentStage.getBoyfriend());
                    playState.currentStage.addCharacter(rtxBF, CharacterType.BF);
                }
                if (rtxGF != null) {
                    playState.currentStage.remove(playState.currentStage.getGirlfriend());
                    playState.currentStage.addCharacter(rtxGF, CharacterType.GF);
                }
            case 460:
                if (jerry != null) {
                    playState.currentStage.remove(playState.currentStage.getDad());
                    playState.currentStage.addCharacter(jerry, CharacterType.DAD);
                }
                if (bf != null) {
                    playState.currentStage.remove(playState.currentStage.getBoyfriend());
                    playState.currentStage.addCharacter(bf, CharacterType.BF);
                }
                if (gf != null) {
                    playState.currentStage.remove(playState.currentStage.getGirlfriend());
                    playState.currentStage.addCharacter(gf, CharacterType.GF);
                }
            case 716:
                VideoCutscene.play(Paths.videos("Lyrics"), CutsceneType.MIDSONG);
        }
    }

    override public function onUpdate(event:UpdateScriptEvent) {
        if (playState == null || playState.playerStrumline == null) return;

        tvShader.update(event.elapsed);
        if (heatwave) heatwaveShader.update(event.elapsed);

        if (!centeredStrum) return;

/*        for (cover in playState.opponentStrumline.noteHoldCovers.members) cover.x = -1000;

        for (k in 0...playState.playerStrumline.noteHoldCovers.members.length) {
            var note = playState.playerStrumline.strumlineNotes.members[k];
            var cover = playState.playerStrumline.noteHoldCovers.members[k];
            cover.x = note.x - FlxG.width * 0.25 + Constants.STRUMLINE_X_OFFSET;
        }*/

        // WHY THE HELL IS THIS NOT WORKING ?
        //if (!spinStrums) return;
/*        index = 0;
        for (note in playState.playerStrumline.strumlineNotes.members) {
            if (note != null) {
                note.x = playerPos[index].x + 15 * Math.sin((playState.conductorInUse.songPosition + index * 0.25) * Math.PI);
                note.y = playerPos[index].y + 30 * Math.cos((playState.conductorInUse.songPosition + index * 0.25) * Math.PI);
                index++;
            }
        }
        index = 0;

        for (j in 0...playState.opponentStrumline.members.length) {
            var note = playState.opponentStrumline.members[j];
            note.x = opponentPos[j].x + 15 * Math.sin((playState.conductorInUse.songPosition + j * 0.25) * Math.PI);
            note.y = opponentPos[j].y + 30 * Math.cos((playState.conductorInUse.songPosition + j * 0.25) * Math.PI);
        }*/
    }

    function centerStrum() {
        centeredStrum = true;
        for (note in playState.opponentStrumline.strumlineNotes) {
            FlxTween.tween(note, {x: -1000}, 1.5, {ease: FlxEase.quadInOut});
            FlxTween.tween(note, {angle: 360}, 1, {ease: FlxEase.quadInOut});
        }

        for (note in playState.playerStrumline.strumlineNotes)
            FlxTween.tween(note, {x: note.x - FlxG.width * 0.25 + Constants.STRUMLINE_X_OFFSET, angle: 360}, 1, {ease: FlxEase.quadInOut});

        FlxTween.tween(playState.opponentStrumline, {x: -1000}, 1, {ease: FlxEase.quadInOut});
        FlxTween.tween(playState.opponentStrumline.background, {x: -1000}, 1, {ease: FlxEase.quadInOut});
        FlxTween.tween(playState.playerStrumline, {x: playState.playerStrumline.x - FlxG.width * 0.25 + Constants.STRUMLINE_X_OFFSET}, 1, {ease: FlxEase.quadInOut });
        FlxTween.tween(playState.playerStrumline.background, {alpha: 0, x: playState.playerStrumline.background.x - FlxG.width * 0.25 + Constants.STRUMLINE_X_OFFSET}, 1, {ease: FlxEase.quadInOut });
    }

    override public function onSongEnd(event:ScriptEvent) {
        if (fire != null) fire.destroy();
        if (warning != null) warning.destroy();
        if (tvShader != null) tvShader = null;
        if (heatwaveShader != null) heatwaveShader = null;

        if (!PlayStatePlaylist.isStoryMode) return;
        if (!hasPlayedCutscene) {
            event.cancel();
            VideoCutscene.play(Paths.videos("W1 End"), CutsceneType.ENDING);
            hasPlayedCutscene = true;
        }
    }
}