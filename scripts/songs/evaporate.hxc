import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import funkin.data.character.CharacterDataParser;
import funkin.graphics.FunkinSprite;
import funkin.modding.events.ScriptEvent;
import funkin.play.character.BaseCharacter;
import funkin.play.character.CharacterType;
import funkin.play.cutscene.CutsceneType;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.PlayState;
import funkin.play.PlayStatePlaylist;
import funkin.play.song.ScriptedSong;
import funkin.Preferences;

class Evaporate extends ScriptedSong {
    var playState(get, never):PlayState;
    function get_playState():PlayState { return PlayState.instance; }

    var hasPlayedCutscene:Bool = false;
    var warning:FunkinSprite;
    var angryJerry:BaseCharacter;

    function new() {
        super("evaporate");
    }

    override public function onCreate(event:ScriptEvent) {
        warning = FunkinSprite.create(0, 0);
        warning.loadSparrow("warningdodge");
        warning.animation.addByPrefix("dodge", "warningdodge", 24, true);
        warning.animation.play("dodge");
        warning.camera = playState.camCutscene;
        warning.alpha = 0;
        playState.add(warning);

        angryJerry = CharacterDataParser.fetchCharacter("mouse angry");
        angryJerry.ignoreExclusionPref = [];
    }

    override public function onStepHit(event:SongTimeScriptEvent) {
        switch (event.step) {
            case 1: FlxTween.tween(warning, {alpha: 1}, 0.3, {});
            case 48: FlxTween.tween(warning, {alpha: 0}, 0.3, {});
            case 1016:
                FlxTween.tween(playState.camHUD, {alpha: 0.5}, 0.5, {});
                FlxTween.tween(playState.playerStrumline.background, {alpha: 0}, 0.5, {});
                FlxTween.tween(playState.opponentStrumline.background, {alpha: 0}, 0.5, {});
            case 1024:
                FlxTween.tween(playState.camHUD, {alpha: 1}, 0.5, {});
                FlxTween.tween(playState.playerStrumline.background, {alpha: Preferences.strumlineBackgroundOpacity / 100}, 0.5, {});
                FlxTween.tween(playState.opponentStrumline.background, {alpha: Preferences.strumlineBackgroundOpacity / 100}, 0.5, {});
        }

        if (event.beat > 255 && event.beat <= 381) {
            if (event.step % 4 == 0) {
                FlxTween.tween(playState.camHUD, {y: -12}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.circOut });
                FlxTween.tween(playState.camGame.scroll, {y: 12}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.sineIn });
            }
            if (event.step % 4 == 2) {
                FlxTween.tween(playState.camHUD, {y: 0}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.sineIn });
                FlxTween.tween(playState.camGame.scroll, {y: 0}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.sineIn });
            }
        }

        if (event.beat == 382) {
            FlxTween.tween(playState.camHUD, {y: 0}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.circOut });
            FlxTween.tween(playState.camGame.scroll, {y: 0}, playState.conductorInUse.stepLengthMs * 0.002, { ease: FlxEase.sineIn });
        }
    }

    override public function onBeatHit(event:SongTimeScriptEvent) {
        switch (event.beat) {
            case 126, 318: playState.camGame.alpha = 0;
            case 320: playState.camGame.alpha = 1;
            case 128: FlxTween.tween(playState.camGame, {alpha: 1}, 0.5, {});
            case 190: FlxTween.tween(playState.camGame, {alpha: 0}, 0.5, {});
            case 192: FlxTween.tween(playState.camGame, {alpha: 1}, 1, {});
            case 256:
                if (angryJerry != null) {
                    playState.currentStage.remove(playState.currentStage.getDad());
                    playState.currentStage.addCharacter(angryJerry, CharacterType.DAD);
                }
            case 420:
                FlxTween.tween(playState.camGame, {alpha: 0}, 0.75, {});
                FlxTween.tween(playState.camHUD, {alpha: 0}, 0.75, {});
        }
    }

    override public function onSongRetry(event:SongRetryEvent) {
        warning.alpha = 0;
    }

    override public function onSongEnd(event:ScriptEvent) {
        if (warning != null) warning.destroy();
        warning = null;

        if (!PlayStatePlaylist.isStoryMode) return;
        if (!hasPlayedCutscene) {
            event.cancel();
            VideoCutscene.play(Paths.videos("Sirokou"), CutsceneType.ENDING);
            hasPlayedCutscene = true;
        }
    }
}