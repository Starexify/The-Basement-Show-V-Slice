import flixel.FlxG;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;
import flixel.tweens.FlxTween;
import funkin.api.discord.DiscordClient;
import funkin.audio.FunkinSound;
import funkin.FunkinMemory;
import funkin.graphics.FunkinSprite;
import funkin.modding.events.ScriptEvent;
import funkin.modding.ModStore;
import funkin.modding.module.ScriptedModule;
import funkin.Preferences;
import funkin.ui.freeplay.FreeplayState;
import funkin.ui.FullScreenScaleMode;
import funkin.ui.mainmenu.MainMenuState;
import funkin.ui.options.OptionsState;
import funkin.ui.story.StoryMenuState;
import funkin.util.WindowUtil;
import lime.app.Application;
import lime.graphics.Image;
import Main;
import openfl.filters.ShaderFilter;
import openfl.text.TextFormat;
import StringTools;
import funkin.play.ResultState;

class TBSMain extends ScriptedModule {
    static var TARGET_DIFF:String = "normal";
    static var TARGET_WEEKS:Array<String> = ["week1-tbs", "week2-tbs", "week3-tbs", "week4-tbs", "week5-tbs", "week6-tbs"];

    var shaderVCR:MenusVCRShader;
    var shaderGlow:MenusGlowShader;
    var tvShader:OldTVShader;
    var prevStoryId:String;
    var prevCapsule:Int;
    var tracks:FunkinSprite;
    var tracksTxt:FlxText;
    var applied:Bool = false;

    public static function setInTBSMenu(value:Bool) { ModStore.stores.set("inTBSMenu", value); }
    public static function inTBSMenu():Bool { return ModStore.get("inTBSMenu"); }
    public static function setInTBSState(value:Bool) { ModStore.stores.set("inTBSState", value); }
    public static function inTBSState():Bool { return ModStore.get("inTBSState"); }

    override public function onCreate(event:ScriptEvent) {
        for (char in TBSConstants.STORY_CHARS) FunkinMemory.cacheTexture(Paths.image("storymenu/props/" + char));
        setInTBSState(false);
        ModStore.register("ogDisplayFormat", Main.debugDisplay.infoDisplay.defaultTextFormat);
    }

    override public function onUpdate(event:UpdateScriptEvent) {
        if (FlxG.keys.justPressed.TAB && (FlxG.state is MainMenuState)) {
            openTBSTitleScreen();
            return;
        }

        if (FlxG.state is StoryMenuState) {
            var storyMenu:StoryMenuState = FlxG.state;
            handleStoryMenuUpdate(storyMenu);
        }

        if (FlxG.state.subState is FreeplayState) {
            var freeplay:FreeplayState = FlxG.state.subState;
            if (!TARGET_WEEKS.contains(freeplay.currentCapsule.freeplayData.levelId)) return;
            playConfirmSound();
            if (prevCapsule == freeplay.curSelected) return;
            prevCapsule = freeplay.curSelected;
            playScrollSound();
        }
    }

    override public function onStateCreate(event:ScriptEvent) {
        if (!(FlxG.state is MainMenuState) || !inTBSMenu()) return;
        if (inTBSState()) {
            FlxG.switchState(new TBSMainMenu());
            setInTBSState(false);
        } else {
            DiscordClient.setPresence({state: "In the Menus", details: null});
            WindowUtil.setWindowTitle("Friday Night Funkin'");
            changeDebugFont("tbs.ttf", true);
            setIcon("FNF");
            setInTBSMenu(false);
        }
    }

    override public function onStateChangeBegin(event:StateChangeScriptEvent) {
        if (!inTBSMenu()) return;
        if (!(FlxG.state is StoryMenuState) && !(FlxG.state is OptionsState)) return;

        WindowUtil.setWindowTitle("The Basement Show");
        setInTBSState(true);
    }

    override public function onStateChangeEnd(event:StateChangeScriptEvent) {
        if (!(event.targetState is StoryMenuState)) return;
        var storyMenu:StoryMenuState = event.targetState;

        if (tracks == null) {
            tracks = FunkinSprite.create(FlxG.width * 0.07 + (FullScreenScaleMode.gameCutoutSize.x * 0.5), 56 + 425, "storymenu/tracks");
            tracksTxt = new FlxText(FlxG.width * 0.05, tracks.y + 60, 0, "", 32);
            tracksTxt.setFormat(Paths.font("Shermlock.ttf"), 32, 0xFFe55777, "center", FlxTextBorderStyle.OUTLINE, 0xFFFFFFFF);
            tracksTxt.zIndex = tracks.zIndex = 101;
            if (!TARGET_WEEKS.contains(storyMenu.currentLevelId)) tracks.alpha = tracksTxt.alpha = 0;
            updateTracks(storyMenu);
        }
        if (storyMenu.currentLevelId == "week2-tbs") storyMenu.levelProps.members[0].flipX = true;
        storyMenu.levelBackground.screenCenter(0x01);
        storyMenu.add(tracks);
        storyMenu.add(tracksTxt);

        if (!inTBSMenu()) return;
        DiscordClient.setPresence({state: "In the Menus", details: null, largeImageKey: TBSConstants.DISCORD_LOGO});
        WindowUtil.setWindowTitle("The Basement Show");

        /*var diff = storyMenu.levelList.indexOf("week1-tbs") - storyMenu.levelList.indexOf(storyMenu.currentLevelId);
        storyMenu.changeLevel(diff);*/
        playMenuMusic("basementMenu");

        shaderGlow = new MenusGlowShader();
        shaderGlow.setFloat("size", 16.0);
        shaderGlow.setFloat("dim", 2.0);
        shaderVCR = new MenusVCRShader();
        if (FlxG.camera.filters != null) {
            FlxG.camera.filters.push(new ShaderFilter(shaderGlow));
            FlxG.camera.filters.push(new ShaderFilter(shaderVCR));
        }
        else FlxG.camera.filters = [new ShaderFilter(shaderGlow), new ShaderFilter(shaderVCR)];
    }

    override public function onSubStateOpenEnd(event:SubStateScriptEvent) {
        if (!(event.targetState is ResultState) || !inTBSState()) return;
        trace("ADD SHADER TO RESULTS");
        tvShader = new OldTVShader();
        tvShader.setFloat("blueOpac", 1.3);
        for (cam in FlxG.cameras.list) {
            if (cam.filters != null) cam.filters.push(new ShaderFilter(tvShader));
            else cam.filters = [new ShaderFilter(tvShader)];
        }
    }

    function handleStoryMenuUpdate(storyMenu:StoryMenuState) {
        var currentId = storyMenu.currentLevelId;
        var isTargetWeek = TARGET_WEEKS.contains(currentId);

        if (prevStoryId != currentId) {
            handleLevelChange(storyMenu, currentId, isTargetWeek);
            prevStoryId = currentId;
        }

        // Ensure UI is visible for non-target weeks
        if (isTargetWeek) {
            playConfirmSound();
            handleDifficultyForTargetWeek(storyMenu);
        } else {
            setDifficultyUIVisible(storyMenu, true);
        }
    }

    function handleLevelChange(storyMenu:StoryMenuState, currentId:String, isTargetWeek:Bool) {
        if (isTargetWeek) {
            playScrollSound();
            updateTracksVisibility(storyMenu, true);
        } else {
            updateTracksVisibility(storyMenu, false);
            storyMenu.refresh();
        }

        // Handle week2 special case (flip character)
        storyMenu.levelProps.members[0].flipX = (currentId == "week2-tbs");
        storyMenu.levelBackground.screenCenter(0x01);
    }

    function handleDifficultyForTargetWeek(storyMenu:StoryMenuState) {
        var isTargetDiff = storyMenu.currentDifficultyId == TARGET_DIFF;

        if (!isTargetDiff && !applied) {
            playScrollSound();
            applied = false;
        }

        if (isTargetDiff) {
            setDifficultyUIVisible(storyMenu, false);
            if (!applied) {
                storyMenu.currentDifficultyId = StoryMenuState.rememberedDifficulty = TARGET_DIFF;
                applied = true;
            }
        } else {
            setDifficultyUIVisible(storyMenu, true);
        }
    }

    function updateTracksVisibility(storyMenu:StoryMenuState, show:Bool) {
        if (tracks == null) return;

        if (show) {
            updateTracks(storyMenu);
            FlxTween.tween(tracks, {alpha: 1}, 0.6);
            FlxTween.tween(tracksTxt, {alpha: 1}, 0.6);
        } else {
            FlxTween.tween(tracks, {alpha: 0}, 0.6);
            FlxTween.tween(tracksTxt, {alpha: 0}, 0.6);
        }
    }

    function setDifficultyUIVisible(storyMenu:StoryMenuState, visible:Bool) {
        storyMenu.leftDifficultyArrow.visible = visible;
        storyMenu.rightDifficultyArrow.visible = visible;
        storyMenu.difficultySprite.visible = visible;
    }

    function updateTracks(storyMenu:StoryMenuState) {
        var displayNames = storyMenu.currentLevel.getSongDisplayNames(storyMenu.currentDifficultyId);
        var fixedNames = displayNames.map(name -> return (name == "Unknown") ? "???" : name);

        tracksTxt.text = fixedNames.join('\n');
        tracksTxt.screenCenter(0x01);
        tracksTxt.x -= FlxG.width * 0.35 - (FullScreenScaleMode.gameCutoutSize.x * 0.4);
    }

    function openTBSTitleScreen() {
        for (char in TBSConstants.MENU_CHARS) FunkinMemory.cacheTexture(Paths.image("mainmenuchar/" + char));
        setIcon("TBS");
        DiscordClient.setPresence({state: null, details: null, largeImageKey: TBSConstants.DISCORD_LOGO});
        WindowUtil.setWindowTitle("The Basement Show");
        setInTBSMenu(true);
        changeDebugFont("tbs.ttf");
        FlxG.switchState(new TBSTitleState());
    }

    function changeDebugFont(path:String, ?revert:Bool) {
        if (Preferences.debugDisplay != 0 && Assets.exists(Paths.font(path)) && Main.debugDisplay != null) {
            var debugDisplay = Main.debugDisplay;
            var format = revert ? ModStore.get("ogDisplayFormat") : new TextFormat(Assets.getPath(Paths.font(path)));
            debugDisplay.infoDisplay.defaultTextFormat = format;
            debugDisplay.fpsGraph?.textDisplay?.defaultTextFormat = format;
            debugDisplay.gcMemGraph?.textDisplay?.defaultTextFormat = format;
            debugDisplay.taskMemGraph?.textDisplay?.defaultTextFormat = format;
        }
    }

    function setIcon(key:String) {
        var icon = Image.fromBytes(Assets.getBytes(Paths.image(key)));
        Application.current.window.setIcon(icon);
    }

    override public function onDestroy(event:ScriptEvent) {
        if (shaderGlow != null) shaderGlow = null;
        if (shaderVCR != null) shaderVCR = null;
        if (tvShader != null) tvShader = null;
        if (tracks != null) tracks.destroy();
        if (tracksTxt != null) tracksTxt.destroy();
    }

    public static function playConfirmSound() {
        // Stop any existing confirm sounds
        for (sound in FunkinSound.pool)
            if (StringTools.contains(sound._label, "confirmMenu.ogg")) {
                sound.stop();
                FunkinSound.playOnce(Paths.sound("confirmMenuTBS"));
            }
    }

    public static function playScrollSound() {
        // Stop any existing scroll sounds
        for (sound in FunkinSound.pool) if (StringTools.contains(sound._label, "scrollMenu.ogg")) sound.stop();
        FunkinSound.playOnce(Paths.sound("scrollMenuTBS"));
    }

    public static function playSound(key:String, ?volume:Float) {
        FunkinSound.playOnce(Paths.sound(key), volume ?? 1.0);
    }

    public static function playMenuMusic(key:String, ?volume:Float) {
        FunkinSound.playMusic(key, {
            startingVolume: volume ?? 1.0,
            overrideExisting: true,
            restartTrack: false,
            persist: true
        });
    }
}