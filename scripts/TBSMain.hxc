import flixel.FlxG;
import funkin.api.discord.DiscordClient;
import funkin.audio.FunkinSound;
import funkin.FunkinMemory;
import funkin.modding.events.ScriptEvent;
import funkin.modding.ModStore;
import funkin.modding.module.ScriptedModule;
import funkin.ui.mainmenu.MainMenuState;
import funkin.ui.options.OptionsState;
import funkin.ui.story.StoryMenuState;
import funkin.util.WindowUtil;
import lime.app.Application;
import lime.graphics.Image;
import openfl.filters.ShaderFilter;
import StringTools;

class TBSMain extends ScriptedModule {
    var shaderVCR:MenusVCRShader;
    var shaderGlow:MenusGlowShader;
    var prevStoryId:String;

    var applied:Bool = false;
    static var targetDiff:String = "normal";
    static var targetWeeks:Array<String> = ["week1-tbs", "week2-tbs", "week3-tbs", "week4-tbs", "week5-tbs", "week6-tbs"];

    public static function setInTBSMenu(value:Bool) { ModStore.stores.set("inTBSMenu", value); }
    public static function inTBSMenu():Bool { return ModStore.get("inTBSMenu"); }

    public static function setInTBSState(value:Bool) { ModStore.stores.set("inTBSState", value); }
    public static function inTBSState():Bool { return ModStore.get("inTBSState"); }

    override public function onCreate(event:ScriptEvent) {
        for (char in TBSConstants.STORY_CHARS) FunkinMemory.cacheTexture(Paths.image("storymenu/props/" + char));
        setInTBSState(false);
    }

    override public function onUpdate(event:UpdateScriptEvent) {
        if (FlxG.keys.justPressed.TAB && (FlxG.state is MainMenuState)) openTBSTitleScreen();

        if (!(FlxG.state is StoryMenuState)) return;
        var storyMenu:StoryMenuState = FlxG.state;
        if (prevStoryId != storyMenu.currentLevelId) {
            storyMenu.levelBackground.screenCenter(0x01);
            prevStoryId = storyMenu.currentLevelId;
        }
        if (targetWeeks.contains(storyMenu.currentLevelId) && storyMenu.currentDifficultyId != targetDiff) {
            applied = false;
            for (sound in FunkinSound.pool) if (StringTools.contains(sound._label, "scrollMenu.ogg")) sound.stop();
        }
        if (targetWeeks.contains(storyMenu.currentLevelId) && storyMenu.currentDifficultyId == targetDiff) storyMenu.leftDifficultyArrow.visible = storyMenu.rightDifficultyArrow.visible = storyMenu.difficultySprite.visible = false;
        else storyMenu.leftDifficultyArrow.visible = storyMenu.rightDifficultyArrow.visible = storyMenu.difficultySprite.visible = true;
        if (applied) return;
        storyMenu.leftDifficultyArrow.visible = storyMenu.rightDifficultyArrow.visible = storyMenu.difficultySprite.visible = false;
        storyMenu.currentDifficultyId = StoryMenuState.rememberedDifficulty = targetDiff;
        applied = true;
    }

    override public function onStateCreate(event:ScriptEvent) {
        if (!(FlxG.state is MainMenuState) || !inTBSMenu()) return;
        if (inTBSState()) {
            FlxG.switchState(new TBSMainMenu());
            setInTBSState(false);
        } else {
            DiscordClient.setPresence({state: "In the Menus", details: null});
            WindowUtil.setWindowTitle("Friday Night Funkin'");
            setIcon("FNF");
            setInTBSMenu(false);
        }
    }

    override public function onStateChangeBegin(event:StateChangeScriptEvent) {
        if (!inTBSMenu()) return;
        if (!(FlxG.state is StoryMenuState) && !(FlxG.state is OptionsState)) return;
        WindowUtil.setWindowTitle("The Basement Show");
        setInTBSState(true);
    }

    override public function onStateChangeEnd(event:StateChangeScriptEvent) {
        if (!(event.targetState is StoryMenuState) || !inTBSMenu()) return;
        var storyMenu:StoryMenuState = event.targetState;
        var diff = storyMenu.levelList.indexOf("week1-tbs") - storyMenu.levelList.indexOf(storyMenu.currentLevelId);
        storyMenu.changeLevel(diff);
        playTBSMenuMusic();

        shaderGlow = new MenusGlowShader();
        shaderGlow.setFloat("size", 16.0);
        shaderGlow.setFloat("dim", 2.0);
        shaderVCR = new MenusVCRShader();
        if (FlxG.camera.filters != null) {
            FlxG.camera.filters.push(new ShaderFilter(shaderGlow));
            FlxG.camera.filters.push(new ShaderFilter(shaderVCR));
        }
        else FlxG.camera.filters = [new ShaderFilter(shaderGlow), new ShaderFilter(shaderVCR)];
    }

    public static function playTBSMenuMusic() {
        FunkinSound.playMusic("basementMenu",
        {
            startingVolume: 1.0,
            overrideExisting: true,
            restartTrack: false,
            persist: true
        });
    }

    function openTBSTitleScreen() {
        for (char in TBSConstants.MENU_CHARS) FunkinMemory.cacheTexture(Paths.image("mainmenuchar/" + char));
        setIcon("TBS");
        DiscordClient.setPresence({state: null, details: null, largeImageKey: TBSConstants.DISCORD_LOGO});
        WindowUtil.setWindowTitle("The Basement Show");
        setInTBSMenu(true);
        FlxG.switchState(new TBSTitleState());
    }

    function setIcon(key:String) {
        var icon = Image.fromBytes(Assets.getBytes(Paths.image(key)));
        Application.current.window.setIcon(icon);
    }

    override public function onDestroy(event:ScriptEvent) {
        if (shaderGlow != null) shaderGlow = null;
        if (shaderVCR != null) shaderVCR = null;
    }
}