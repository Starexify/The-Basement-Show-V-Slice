import flixel.addons.transition.FlxTransitionableState;
import flixel.FlxG;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxSubState;
import funkin.modding.ModStore;
import funkin.play.PlayState;
import funkin.ui.FullScreenScaleMode;
import funkin.ui.MusicBeatState;
import funkin.ui.transition.LoadingState;

class TBSCustomFade extends ScriptedFlxSubState {
    var isTransIn:Bool;
    var transitionSprite:FunkinSprite;

    function new(duration:Float, isTransIn:Bool, ?nextState:MusicBeatState) {
        super();

        this.isTransIn = isTransIn;

        if (nextState != null) ModStore.stores.set("TBSNextState", nextState);

        var width:Int = Std.int(FlxG.width);
        var height:Int = Std.int(FlxG.height);

        transitionSprite = new FunkinSprite(width - 1845 - (FullScreenScaleMode.gameCutoutSize.x * 0.5), height - 1610).loadSparrow("kevin_normal");
        transitionSprite.animation.addByPrefix("transition", "kevin_normal", 34, false);
        transitionSprite.scrollFactor.set(0, 0);
        add(transitionSprite);

        if (isTransIn) {
            transitionSprite.animation.play("transition", true, true, 28);
            transitionSprite.animation.onFinish.add((anim) -> close());
        } else {
            transitionSprite.animation.play("transition", true);
            transitionSprite.animation.onFinish.add((anim) -> handleStateSwitch());
        }
    }

    function handleStateSwitch() {
        var params:Dynamic = ModStore.get("TBSPlayStateParams");
        if (params != null) {
            ModStore.stores.remove("TBSPlayStateParams");
            close();
            LoadingState.loadPlayState(params, true);
            return;
        }

        var storedState:MusicBeatState = ModStore.get("TBSNextState");
        if (storedState != null) {
            ModStore.stores.remove("TBSNextState");
            close();
            FlxG.switchState(() -> storedState);
        }
    }

    public static function switchPlayState(params:PlayStateParams, fadeTime:Float) {
        if (!FlxTransitionableState.skipNextTransIn) {
            FlxG.state.openSubState(new TBSCustomFade(fadeTime, false));

            ModStore.stores.set("TBSPlayStateParams", params);
            return;
        }
        FlxTransitionableState.skipNextTransIn = false;
        LoadingState.loadPlayState(params, true);
    }

    public static function switchState(nextState:MusicBeatState) {
        if (!FlxTransitionableState.skipNextTransIn) {
            FlxG.state.openSubState(new TBSCustomFade(0.6, false, nextState));
            return;
        }
        FlxTransitionableState.skipNextTransIn = false;
        FlxG.switchState(() -> nextState);
    }
}